##### INSTALLATION
pip install -r requirements.txt


##### EXECUTION
python uerc23.py

This will automatically compute performance using:
- baseline ResNet-18 in baseline_model/uerc-resnet18-dropout0.2
- test split of data/public and data/public_annotations.csv. Split will be performed automatically (same for train and validation sets) and by default stored to runs/train_val_test_splits.csv so you know which images you can use to train your model(s). Results of the uerc23.py will be computed on images marked as test. However, feel free to split the data your own way, since final competition ranking and results will be performed on the sequestered data.


## USING YOUR OWN TRAIN/VAL/TEST SPLIT
If you wish to provide your own splits prepare train_val_test_splits.csv and put it in the run folder.


##### FILES
config.ini          Configuration file (instructions are within the file).
requirements.txt    Packages for pip install (pip install -r requirements.txt).
userc23.py          Main evaluation script. Here you can also see how to extract features from the CNN.

baseline_model/
train_baseline.py           Code that was used to train baseline ResNet. You do not need to use this, it is just as a showcase.
uerc-resnet18-dropout0.2    Weights for the baseline model.

data/
public_annotations.csv      Annotation file for each subject (gender and ethnicity). Possible values are: male, female and asian, black, white, other
uerc_dataset.py             Pytorch dataloader class with everything needed to process (and split) data. Feel free to use your own splits.
public/                     The UERC23 public dataset.


##### THE DATASET
The public part of the dataset comprises of 248,655 images of 1,310 subjects with .jpg and .png files and is made up of: 
- Old UERC 2019 training set: 2,304 images of 166 subjects
- VGGFace2-Ear-derived set: 234,651 images of 660 subjects
- Newly collected dataset: 11,700 images of 484 subjects

Additionally there is a sequestered dataset of 1,670 images of 70 subjects.


## USING YOUR OWN CNN
Export feature vectors for your own model and store them in the following files:
All - All.classes.csv
All - All.csv
Female - Asian.classes.csv
Female - Asian.csv
Female - Black.classes.csv
Female - Black.csv
Female - White.classes.csv
Female - White.csv
Male - Asian.classes.csv
Male - Asian.csv
Male - Black.classes.csv
Male - Black.csv
Male - White.classes.csv
Male - White.csv

And set precomputed_features_path in the uerc23.py to the path to where these files are. Evaluation script will now read your feature vectors, instead of running baseline_model to extract features.